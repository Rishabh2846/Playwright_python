from behave import given, when, then
from selenium import webdriver
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import time

@given('I am on the drag and drop page')
def step_impl(context):
    service = EdgeService()
    options = EdgeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    context.driver = webdriver.Edge(service=service, options=options)
    context.driver.maximize_window()
    context.driver.get("https://practice.expandtesting.com/drag-and-drop")

@when('I drag column A to column B')
def step_impl(context):
    wait = WebDriverWait(context.driver, 10)
    
    # Get the source and target elements
    source = wait.until(EC.presence_of_element_located((By.ID, "column-a")))
    target = wait.until(EC.presence_of_element_located((By.ID, "column-b")))
    
    # Store initial texts for verification
    context.initial_source_text = source.text
    context.initial_target_text = target.text
    
    # Try standard drag and drop first
    try:
        ActionChains(context.driver).drag_and_drop(source, target).perform()
        time.sleep(1)
        return
    except:
        pass
    
    # Try click-hold-move-release if standard method fails
    try:
        actions = ActionChains(context.driver)
        actions.click_and_hold(source)\
               .move_to_element(target)\
               .release(target)\
               .perform()
        time.sleep(1)
        return
    except:
        pass
    
    # Try JavaScript drag and drop as last resort
    js_drag_drop = """
    function createEvent(typeOfEvent) {
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(typeOfEvent, true, true, null);
        event.dataTransfer = {
            data: {},
            setData: function (key, value) {
                this.data[key] = value;
            },
            getData: function (key) {
                return this.data[key];
            }
        };
        return event;
    }
    
    function dispatchEvent(element, event, transferData) {
        if (transferData !== undefined) {
            event.dataTransfer = transferData;
        }
        if (element.dispatchEvent) {
            element.dispatchEvent(event);
        } else if (element.fireEvent) {
            element.fireEvent("on" + event.type, event);
        }
    }
    
    function simulateDragDrop(source, target) {
        var dragStartEvent = createEvent('dragstart');
        dispatchEvent(source, dragStartEvent);
        
        var dropEvent = createEvent('drop');
        dispatchEvent(target, dropEvent, dragStartEvent.dataTransfer);
        
        var dragEndEvent = createEvent('dragend');
        dispatchEvent(source, dragEndEvent, dropEvent.dataTransfer);
    }
    
    var source = arguments[0];
    var target = arguments[1];
    simulateDragDrop(source, target);
    """
    context.driver.execute_script(js_drag_drop, source, target)
    time.sleep(1)

@then('the columns should be swapped')
def step_impl(context):
    try:
        wait = WebDriverWait(context.driver, 10)
        
        # Get the final state of columns
        source = wait.until(EC.presence_of_element_located((By.ID, "column-a")))
        target = wait.until(EC.presence_of_element_located((By.ID, "column-b")))
        
        # Verify the swap
        assert source.text == context.initial_target_text, \
            f"Source column text mismatch. Expected: {context.initial_target_text}, Got: {source.text}"
        assert target.text == context.initial_source_text, \
            f"Target column text mismatch. Expected: {context.initial_source_text}, Got: {target.text}"
        
        print("Successfully verified column swap!")
    finally:
        context.driver.quit()
